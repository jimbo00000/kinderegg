# parse_shadertoy_json.py

from __future__ import print_function
import json
import os
import sys
import shutil
import requests
from PIL import Image

def dumpReadmeFile(info, dir):
	readmeFileOut = os.path.join(dir, 'README.txt')
	with open(readmeFileOut,'w') as outStream:
		print("Title: " + info['name'], file=outStream)
		print("Author: " + info['username'], file=outStream)
		print('',file=outStream)
		print("Tags: " + ', '.join(info['tags']), file=outStream)
		print('',file=outStream)
		print("Description: " + info['description'], file=outStream)
		print('',file=outStream)
		print('Generated from https://www.shadertoy.com/view/{0} by kinderegg.'.format(info['id']),file=outStream)


textureHeader = """/*
 * Generated by parse_shadertoy_json.py
 */
"""
def dumpTextureHeader(renderpass):
	texFileOut = os.path.join('..', 'autogen', 'g_textures.h')
	texDir = os.path.join('..', 'textures')
	with open(texFileOut,'w') as outStream:
		print(textureHeader, file=outStream)
		pass_id = 0
		for r in renderpass:
			# Pull out textures
			print("  Pass ")
			print(r['inputs'])
			tex_id = 0
			for i in range(4):
				inp = r['inputs']
				w = 0
				h = 0
				d = 0
				if i < len(inp):
					t = inp[i]
					texfile = os.path.basename(t['src'])
					img = Image.open(os.path.join(texDir,texfile))
					px = img.load()
					w = img.size[0]
					h = img.size[1]
					d = img.mode
				arrayname = 'tex' + str(pass_id) + str(i)
				vardecl = 'int {0} = {1};'
				print(vardecl.format(arrayname+'w', w), file=outStream)
				print(vardecl.format(arrayname+'h', h), file=outStream)
				print(vardecl.format(arrayname+'d', d), file=outStream)

				arrdecl = 'char {0}[] = '
				print(arrdecl.format(arrayname), file=outStream)
				print('{', file=outStream)
				if i < len(inp):
					for j in range(10):#img.size[1]):
						for i in range(10):#img.size[0]):
							p = px[i,j]
							if isinstance(p,int):
								print(" " + str(p) + ",", end='', file=outStream)
							elif isinstance(p,tuple):
								for x in p:
									print(" " + str(x) + ",", end='', file=outStream)
				print('};', file=outStream)
				print('', file=outStream)

				tex_id += 1
			pass_id += 1


def dumpShaderFiles(renderpass):
	"""Save shader source to ../shaders/ for hardcoding by CMake."""
	shaderDir = os.path.join('..', 'shaders')
	for r in renderpass:
		shfile = r['type'] + ".frag"
		src = r['code']
		# TODO some retroactive refactoring
		#src = src.replace("main", "mainImage")
		#src = src.replace("gl_FragColor", "glFragColor")
		with open(os.path.join(shaderDir, shfile),'w') as outStream:
			print(src, file=outStream)
		print(shfile + ": " + str(len(src)) + " bytes written.")


def getShadertoyJson(id):
	"""Send a request to Shaderoy.com for the given shadertoy id.
	Store your API key in the filename below.
	"""
	apikey = "xxxxxx"
	with open('apikey.txt','r') as keystr:
		apikey = keystr.read()
	req = 'https://www.shadertoy.com/api/v1/shaders/{0}?key={1}'
	req = req.format(id, apikey)
	r = requests.get(req)
	print(r)
	return r.json()


def invokeBuild(dir):
	"""Invoke CMake which in turn invokes designated compiler to build the executable."""
	cmakepath = '"C:/Program Files (x86)/CMake/bin/cmake"'
	if not os.path.exists(cmakepath):
		cmakepath = '"C:/Program Files (x86)/CMake 2.8/bin/cmake"'
	slnpath = '../build'
	os.chdir(slnpath)
	cmds = [
		cmakepath + ' ..',
		cmakepath + ' --build . --config Release --clean-first',]
	for c in cmds:
		print(c)
		os.system(c)
	# Copy built exe to output dir
	kepath = "Release"
	keexe = "kinderegg.exe" # specified in CMakeLists.txt
	shutil.copyfile(
		os.path.join(kepath, keexe),
		os.path.join('..', 'tools', dir, keexe))
	# Copy SDL2.dll to output dir
	sdlpath = 'C:/lib/SDL2-2.0.3'
	sdllibpath = 'lib/x86'
	sdldllname = 'SDL2.dll'
	shutil.copyfile(
		os.path.join(sdlpath, sdllibpath, sdldllname),
		os.path.join('..', 'tools', dir, sdldllname))


#
# Main: enter here
#
def main(argv=None):
	# https://www.shadertoy.com/api/v1/shaders/query/string?key=appkey
	# Broken examples:
	# ldXXDj - Pirates by iq
	# 4dfXWj - Music Mario by iq
	# XdfXWS - Music - Pulsating by iq

	# 4df3D8
	# 4dl3zn - Bubbles by iq
	# MdB3Rc
	# lts3zn - cardboard waves
	if len(sys.argv) <= 1:
		print("Usage: requires one argument(shadertoy id)")
		quit()
	id = sys.argv[1]
	j = getShadertoyJson(id)
	if 'Error' in j:
		print(j['Error'])
	else:
		print('Success')
		info = j['Shader']['info']
		name = info['name']
		dir = name
		if not os.path.exists(dir):
			os.mkdir(dir)
		dumpReadmeFile(info, dir)
		renderpass = j['Shader']['renderpass']
		dumpShaderFiles(renderpass)
		dumpTextureHeader(renderpass)
		#invokeBuild(dir)
		print(id)
		print(name + " by " + info['username'])


if __name__ == "__main__":
	sys.exit(main())
